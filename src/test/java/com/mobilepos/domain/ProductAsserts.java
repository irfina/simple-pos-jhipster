package com.mobilepos.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relevant properties")
            .satisfies(e -> assertThat(e.getSku()).as("check sku").isEqualTo(actual.getSku()))
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getBarcode()).as("check barcode").isEqualTo(actual.getBarcode()))
            .satisfies(e -> assertThat(e.getDiscountInPercent()).as("check discountInPercent").isEqualTo(actual.getDiscountInPercent()))
            .satisfies(e -> assertThat(e.getMinDiscQty()).as("check minDiscQty").isEqualTo(actual.getMinDiscQty()))
            .satisfies(e -> assertThat(e.getSellPrice()).as("check sellPrice").isEqualTo(actual.getSellPrice()))
            .satisfies(e -> assertThat(e.getIsVatApplied()).as("check isVatApplied").isEqualTo(actual.getIsVatApplied()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()))
            .satisfies(e -> assertThat(e.getIsStockable()).as("check isStockable").isEqualTo(actual.getIsStockable()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getCreatedBy()).as("check createdBy").isEqualTo(actual.getCreatedBy()))
            .satisfies(e -> assertThat(e.getLastUpdatedAt()).as("check lastUpdatedAt").isEqualTo(actual.getLastUpdatedAt()))
            .satisfies(e -> assertThat(e.getLastUpdatedBy()).as("check lastUpdatedBy").isEqualTo(actual.getLastUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relationships")
            .satisfies(e -> assertThat(e.getDefaultMetricInv()).as("check defaultMetricInv").isEqualTo(actual.getDefaultMetricInv()))
            .satisfies(e -> assertThat(e.getDefaultMetricSales()).as("check defaultMetricSales").isEqualTo(actual.getDefaultMetricSales()))
            .satisfies(
                e -> assertThat(e.getDefaultMetricPurchase()).as("check defaultMetricPurchase").isEqualTo(actual.getDefaultMetricPurchase())
            )
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()));
    }
}
